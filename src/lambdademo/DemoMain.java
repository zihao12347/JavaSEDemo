package lambdademo;

/**
 * 函数式编程思想：重视结果
 *      面向对象思想：侧重的是事务的对象，面向过程：侧重的是做一件事务的过程和顺序
 *
 *      案例：沉余的runnable代码
 *        实现多线程方式：
 *          1.通过实现runnable接口，并重写run()方法，
 *          2.通过匿名内部类实现runnable接口，重写run()方法，减少创建runnable实现类的代码
 *          可知：run()方法体才是关键所在:
 *      解决方案：
 *        通过lambda表达式实现；(参数类型 参数名称...) -> {方法体}
 *          lambda表达式组成部分：
 *              1.(参数类型 参数名称...): 一些参数
 *              2.->: 箭头,参数传递给方法体的作用
 *              3.{方法体}：方法具体的代码
 *          lambda表达式的使用前提：
 *              1.必须具有函数式接口（该接口有且仅有一个抽象方法），
 *              2.必须具有上下文推断：方法的参数或者局部变量类型必须为lambda接口的对应类型
 *          lambda表达式的特点：
 *              延迟加载
 *          lambda的省略结构：
 *              （参数列表）参数类型可以省略
 *              （参数列表）如果只有一个参数，参数类型和（）括号都可以省略
 *               {方法体} 如果方法体中只有一行代码。无论是否有返回值，return关键字可省略，{}大括号和分号都必须一起省略
 *          lambda表达式的使用：
 *              1.通常作为方法的参数使用
 *              2.通过作为方法的返回值使用
 *
 *
 *
 *
 */
public class DemoMain {
    public static void main(String[] args) {
        //当方法体只有一行代码时，{}大括号，分号一起省略
        new Thread(()-> System.out.println("使用lambda表示实现多线程！")).start();
    }
}
